---
  # This Playbook automatically deploys the TuxLab Application to AWS
  # by creating an Ansible Tower node. Be sure to set aws variables in
  # ./vars/aws_vars.yml file prior to execution.

  # Create AWS Enviornment
  - name: Configure EC2
    hosts: localhost
    connection: local
    remote_user: root
    gather_facts: no
    tasks:
      - name: Create AWS VPC
        include: aws/ec2_vpc.yml

      - name: Create AWS Keypair
        include: aws/ec2_key.yml

      - name: Create AWS Tower
        include: aws/ec2_tower.yml

      - name: Create Security Groups
        include: aws/ec2_groups.yml

# Change Ansible Tower Password
   - name: Change Ansible Tower Password
     hosts: ansible_tower
     remote_user: ubuntu
     gather_facts: no
     vars_prompt:
       - name: "ANSIBLE_ADMIN_PASS"
         prompt: "Create an Ansible Tower Admin Password:"
         private: yes
         confirm: yes
     tasks:
      - name: Change Ansible Tower Admin Password
        expect:
            command: sudo tower-manage changepassword admin
            responses:
              "Password:" : "{{ ANSIBLE_ADMIN_PASS }}"
              "Password (again):" : "{{ ANSIBLE_ADMIN_PASS }}"

# Configure Ansible Tower to Configure newly created instances
- name: Configure Ansible Tower Callback Provisioning
  hosts: localhost
  connection: local
  remote_user: root
  gather_facts: no
  tasks:

    - name: Create Docker EC2 Enviornment
      include: aws/ec2_docker.yml

    - name: Create Meteor EC2 Enviornment
      include: aws/ec2_meteor.yml

- name: Launch Autoscaling Groups
  hosts: localhost
  connection: local
  remote_user: root
  gather_facts: no
  tasks:

    - name: Create Docker EC2 Enviornment
      include: aws/ec2_docker.yml

    - name: Create Meteor EC2 Enviornment
      include: aws/ec2_meteor.yml
