---

# Get Discovery Token
 - name: Create TuxLab directory
   local_action: file path=~/.tuxlab state=directory mode=0755

 - name: Check if Swarm URL is Set
   local_action: stat path=~/.tuxlab/discovery_url
   ignore_errors: true
   register: etcd_discovery_file

 - name: Create ETCD Discovery URL
   local_action: uri url=https://discovery.etcd.io/new?size=2 return_content=yes
   register: etcd_discovery_web
   when: not etcd_discovery_file.stat.exists

 - name: Save to TuxLab Config Folder
   local_action: copy content="{{etcd_discovery_web.content}}" dest=~/.tuxlab/discovery_url
   when: not etcd_discovery_file.stat.exists

 - name: Load Discovery URL
   local_action: set_fact etcd_discovery="{{ lookup('file', '~/.tuxlab/discovery_url') }}"

# Set Password Files
 - name: Check if pass files set
   local_action: stat path=~/.tuxlab/{{ item }}
   ignore_errors: true
   register: file_info
   with_items:
     - 'root_pass_file'
     - 'meteor_pass_file'
     - 'dns_pass_file'
     - 'proxy_pass_file'

 - name: Generate pass files
   set_fact:
     "{{ item.val }}" : "{{ lookup('pipe','date +%N') | hash('md5') }}"
   when: not {{ item.file }}.stat.exists
   with_items:
     - { file: 'file_info.results[0]', val: 'root_pass' }
     - { file: 'file_info.results[1]', val: 'meteor_pass' }
     - { file: 'file_info.results[2]', val: 'dns_pass' }
     - { file: 'file_info.results[3]', val: 'proxy_pass' }

 - name: Load pass filess
   local_action: set_fact {{ item.val }}="{{ lookup('file', '~/.tuxlab/{{ item.name }}') }}"
   when: ({{ item.file }}.stat.exists)
   with_items:
     - { file: 'file_info.results[0]', val: 'root_pass', name: 'root_pass_file' }
     - { file: 'file_info.results[1]', val: 'meteor_pass', name: 'meteor_pass_file' }
     - { file: 'file_info.results[2]', val: 'dns_pass', name: 'dns_pass_file' }
     - { file: 'file_info.results[3]', val: 'proxy_pass', name: 'proxy_pass_file' }

 - name: Copy pass files
   local_action: copy content="{{ item.val }}" dest=~/.tuxlab/{{ item.name }}
   when: not {{ item.file }}.stat.exists
   with_items:
     - { file: 'file_info.results[0]', val: "{{ root_pass }}", name: 'root_pass_file' }
     - { file: 'file_info.results[1]', val: "{{ meteor_pass }}", name: 'meteor_pass_file' }
     - { file: 'file_info.results[2]', val: "{{ dns_pass }}", name: 'dns_pass_file' }
     - { file: 'file_info.results[3]', val: "{{ proxy_pass }}", name: 'proxy_pass_file' }
