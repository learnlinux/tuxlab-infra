---
  - name: Run Meteor Tests
    hosts: tuxlab-meteor:security_group_meteor
    vars:
      ansible_ssh_user: "{{ 'ec2-user' if 'security_group_meteor' in group_names else 'vagrant' }}"
    vars_files:
      - config.yml
    tasks:

      # Check ETCD Cluster Health
      - name: create test directory
        shell: "etcdctl mkdir test"

      - name: create meteor test file
        shell: "etcdctl mkdir test/meteor"

  - name: Run Docker Swarm Tests
    hosts: tuxlab-swarm-host:tuxlab-swarm-manager:security_group_docker_host:security_group_docker_manager
    gather_facts: no
    vars_files:
      - config.yml
    tasks:

      - name: Ensure we use the configured SSH port for the remainder of the role
        set_fact:
          ansible_port: 2222
        when: ('security_group_docker_host' in group_names or 'tuxlab-swarm-host' in group_names)

     #Check ETCD Cluster Health

      - name: create swarm test files
        shell: "etcdctl mkdir /test/{{ inventory_hostname }}"

      - name: ensure swarm test files exist
        run_once: true
        shell: "etcdctl ls /test/"
        register: result
        until: "'{{ item }}' in result.stdout"
        retries: 3
        delay: 5
        with_items: "{{ play_hosts }}"

      - name: ensure meteor test file exists
        run_once: true
        shell: "etcdctl ls /test/"
        register: result
        until: "'meteor' in result.stdout"
        retries: 3
        delay: 5

      - name: remove test subdirectories
        run_once: true
        shell: "etcdctl rmdir /test/{{ item }}"
        with_items: "{{ play_hosts }}"

      - name: remove test directory
        run_once: true
        shell: "etcdctl rmdir /test/meteor; etcdctl rmdir /test/"

      #Check Docker Swarm Health

      - name: search for healthy nodes
        become: yes
        shell: "grep 'Status: Healthy' ~/.swarm_status"
        ignore_errors: true
        register: healthy_nodes
        when: ('security_group_docker_manager' in group_names or 'tuxlab-swarm-manager' in group_names)

      - name: ensure all nodes are healthy
        assert:
          that: "'{{ (healthy_nodes.stdout_lines)|length }}' == '{{ play_hosts|length - 1 }}'"
        when: ('security_group_docker_manager' in group_names or 'tuxlab-swarm-manager' in group_names)

      # Check DNS Health
      - name: create A record
        shell: 'etcdctl set /skydns/org/tuxlab/cmu/tux/A "{\"host\" : \"10.100.1.10\"}"'
        when: ('security_group_docker_manager' in group_names or 'tuxlab-swarm-manager' in group_names)

      - name: dig for A record
        shell: "dig tux.cmu.tuxlab.org. @10.100.1.10"
        register: tux_record
        when: ('security_group_docker_host' in group_names or 'tuxlab-swarm-host' in group_names)

      - name: ensure A record is properly configured
        assert:
          that: "'\n;; ANSWER SECTION:\ntux.cmu.tuxlab.org.\t5\tIN\tA\t10.100.1.10\n' in tux_record.stdout"
        when: ('security_group_docker_host' in group_names or 'tuxlab-swarm-host' in group_names)

      #Check Proxy Health

      - name: run labVM container
        become: yes
        shell: "docker run --name tux -d tuxlab/labvm-alpine"
        when: ('security_group_docker_host' in group_names or 'tuxlab-swarm-host' in group_names)

      - name: get labVM password
        become: yes
        shell: "docker exec tux cat /pass"
        register: tux_pass
        when: ('security_group_docker_host' in group_names or 'tuxlab-swarm-host' in group_names)

      - name: get labVM ID
        become: yes
        shell: "docker inspect --format='{{ '{{' }}.NetworkSettings.IPAddress{{ '}}' }}' tux"
        register: tux_id
        when: ('security_group_docker_host' in group_names or 'tuxlab-swarm-host' in group_names)

      - name: add proxy data
        shell: "etcdctl set redrouter/SSH::tux '{\"host\" : \"{{ tux_id.stdout }}\", \"username\" : \"root\", \"allowed_auth\" : [\"password\"]}'"
        when: ('security_group_docker_host' in group_names or 'tuxlab-swarm-host' in group_names)

      - name: display password
        debug: msg="{{ tux_pass.stdout }}"
        when: ('security_group_docker_host' in group_names or 'tuxlab-swarm-host' in group_names)

  - name: Final SSH test
    hosts: 127.0.0.1
    connection: local
    vars_files:
      - config.yml
    tasks:

      - name: SSH into tux's labVM
        expect:
          command: ssh tux@10.100.1.11
          responses:
            password: "{{ hostvars['dhost']['tux_pass'].stdout }}"
        register: ssh_success
        delegate_to: localhost

      - name: show SSH result
        debug: msg="{{ ssh_success }}"

      - name: Check SSH success
        fail: msg="SSH into labVM failed"
        when: ("welcome" not in "{{ ssh_success.stdout }}")

  - name: Clean up labVM container
    hosts: tuxlab-swarm-host:security_group_docker_host
    vars_files:
      - config.yml
    tasks:

      - name: Ensure we use the configured SSH port for the remainder of the role
        set_fact:
          ansible_port: 2222

      - name: stop container
        become: yes
        shell: "docker stop tux"

      - name: remove container
        become: yes
        shell: "docker rm tux"
